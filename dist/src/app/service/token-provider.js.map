{"version":3,"sources":["../../../../src/app/service/token-provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAG3C;IAAA;IAoCA,CAAC;IAnCC,gCAAQ,GAAR;QACE,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,sCAAc,GAAd;QACE,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,iCAAS,GAAT,UAAU,KAA8B;QACtC,MAAM,CAAmB,KAAM,CAAC,IAAI,KAAK,SAAS,CAAC;IACrD,CAAC;IAED,sBAAI,gCAAK;aAAT;YACE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;QACH,CAAC;;;OAAA;IAED,sBAAI,sCAAW;aAAf;YACE,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YACpC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;QACH,CAAC;;;OAAA;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,oBAAC;CApCD,AAoCC,IAAA;SApCY,aAAa","file":"token-provider.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\n\nexport class TokenProvider {\n  getToken(): string | Promise<string> {\n    return '';\n  }\n\n  getGitHubToken(): string | Promise<string> {\n    return '';\n  }\n\n  isPromise(token: string| Promise<string>): token is Promise<string> {\n    return (<Promise<string>>token).then !== undefined;\n  }\n\n  get token(): Promise<string> {\n    const token = this.getToken();\n    if (this.isPromise(token)) {\n      return token;\n    } else {\n      return Promise.resolve(token);\n    }\n  }\n\n  get gitHubToken(): Promise<string> {\n    const token = this.getGitHubToken();\n    if (this.isPromise(token)) {\n      return token;\n    } else {\n      return Promise.resolve(token);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}