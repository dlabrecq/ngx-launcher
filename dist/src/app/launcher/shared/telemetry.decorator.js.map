{"version":3,"sources":["../../../../../src/app/launcher/shared/telemetry.decorator.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAEvC,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAEhD;IAAA;IASA,CAAC;IAPU,0BAAW,GAAlB,UAAmB,QAAkB;QACjC,cAAc,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACvC,CAAC;IAEM,0BAAW,GAAlB;QACI,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC;IACnC,CAAC;IAPc,uBAAQ,GAAa,IAAI,CAAC;IAQ7C,qBAAC;CATD,AASC,IAAA;SATY,cAAc;AAW3B,MAAM,oBAAoB,KAAa,EAAE,UAAe;IACpD,MAAM,CAAC,UAAU,MAAgB,EAAE,UAAkB,EAAE,UAAe;QAElE,IAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QAExC,UAAU,CAAC,KAAK,GAAG;YAAU,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACvC,IAAM,gBAAgB,GAAG,cAAc,CAAC,WAAW,EAAE,CAAC;YACtD,EAAE,CAAC,CAAC,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC1D,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC5C,CAAC;YAED,IAAM,SAAS,GAAgB,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACjE,IAAM,MAAM,GAAG,IAAI,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;YAEjF,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACnC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC;QAEF,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC,CAAC;AACN,CAAC","file":"telemetry.decorator.js","sourceRoot":"","sourcesContent":["import * as _ from 'lodash';\nimport { Broadcaster } from 'ngx-base';\nimport { Injector } from '@angular/core';\nimport { PropertiesGetter } from './properties';\n\nexport class StaticInjector {\n    private static injector: Injector = null;\n    static setInjector(injector: Injector) {\n        StaticInjector.injector = injector;\n    }\n\n    static getInjector(): Injector {\n        return StaticInjector.injector;\n    }\n}\n\nexport function broadcast(event: string, properties: any): MethodDecorator {\n    return function (target: Function, methodName: string, descriptor: any) {\n\n        const originalMethod = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n            const injectorInstance = StaticInjector.getInjector();\n            if (!injectorInstance || !injectorInstance.get(Broadcaster)) {\n                return originalMethod.apply(this, args);\n            }\n\n            const broadcast: Broadcaster = injectorInstance.get(Broadcaster);\n            const values = new PropertiesGetter(this, args).mapKeys(_.cloneDeep(properties));\n\n            broadcast.broadcast(event, values);\n            return originalMethod.apply(this, args);\n        };\n\n        return descriptor;\n    };\n}\n"]}