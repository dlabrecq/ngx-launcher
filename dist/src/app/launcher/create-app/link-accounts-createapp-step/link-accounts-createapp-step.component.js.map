{"version":3,"sources":["../../../../../../src/app/launcher/create-app/link-accounts-createapp-step/link-accounts-createapp-step.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAA,EAAmB,SAAA,EAAW,YAAA,EAAc,KAAA,EAAO,QAAA,EAAU,MAAA,EAAO,MAAO,eAAA,CAAgB;AAGpG,OAAO,EAAE,YAAA,EAAa,MAAO,6BAAA,CAA8B;AAG3D;IAOE,4CAAqB,YAA0B,EAAU,cAAiC;QAArE,iBAAY,GAAZ,YAAY,CAAc;QAAU,mBAAc,GAAd,cAAc,CAAmB;QANzF,WAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;QAEzB,cAAS,GAAc,EAAE,CAAC;IAKlC,CAAC;IAED,0DAAa,GAAb,UAAc,OAAgB;QAC5B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,EAAE,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,sBAAI,wDAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aAGD,UAAa,QAAmB;YAC9B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;;;OANA;IAQO,2DAAc,GAAtB;QACE,IAAM,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,EAAX,CAAW,CAAC,CAAC;QACjE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QACtC,CAAC;IACH,CAAC;IACI,6CAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,yCAAyC;oBACnD,WAAW,EAAE,+CAA+C;oBAC5D,SAAS,EAAE,CAAC,+CAA+C,CAAC;iBAC7D,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,iDAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;QACxD,EAAC,IAAI,EAAE,iBAAiB,GAAG;KAC1B,EAH6F,CAG7F,CAAC;IACK,iDAAc,GAA2C;QAChE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAC7B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC7B,CAAC;IACF,yCAAC;CAhDD,AAgDC,IAAA;SAhDY,kCAAkC","file":"link-accounts-createapp-step.component.js","sourceRoot":"","sourcesContent":["import { ChangeDetectorRef, Component, EventEmitter, Input, Optional, Output } from '@angular/core';\n\nimport { Cluster } from '../../model/cluster.model';\nimport { TokenService } from '../../service/token.service';\n\n\nexport class LinkAccountsCreateappStepComponent {\n   select = new EventEmitter(true);\n\n  private _clusters: Cluster[] = [];\n  private clusterId: string;\n\n\n  constructor( private tokenService: TokenService, private changeDetector: ChangeDetectorRef) {\n  }\n\n  selectCluster(cluster: Cluster): void {\n    this.clusterId = cluster.id;\n    this.select.emit(cluster);\n  }\n\n  get clusters(): Cluster[] {\n    return this._clusters;\n  }\n\n  \n  set clusters(clusters: Cluster[]) {\n    this._clusters = clusters;\n    this.autoSetCluster();\n  }\n\n  private autoSetCluster(): void {\n    const connectedClusters = this.clusters.filter(c => c.connected);\n    if (connectedClusters.length === 1) {\n      this.selectCluster(connectedClusters[0]);\n      this.changeDetector.detectChanges();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'f8launcher-link-accounts-createapp-step',\n  templateUrl: './link-accounts-createapp-step.component.html',\n  styleUrls: ['./link-accounts-createapp-step.component.less']\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TokenService, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'select': [{ type: Output },],\n'clusters': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}