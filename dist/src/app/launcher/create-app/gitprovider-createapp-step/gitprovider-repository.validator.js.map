{"version":3,"sources":["../../../../../../src/app/launcher/create-app/gitprovider-createapp-step/gitprovider-repository.validator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAW,MAAO,eAAA,CAAgB;AACtD,OAAO,EAAE,mBAAA,EAA6D,MAAO,gBAAA,CAAiB;AAC9F,OAAO,EAAE,UAAA,EAAW,MAAO,MAAA,CAAO;AAElC,OAAO,EAAE,kBAAA,EAAmB,MAAO,oCAAA,CAAqC;AAGxE;IAGE,iDAAoB,WAA+B;QAA/B,gBAAW,GAAX,WAAW,CAAoB;QAF3C,YAAO,GAAG,mCAAmC,CAAC;IAEC,CAAC;IAExD,0DAAQ,GAAR,UAAS,OAAwB;QAC/B,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,oBAAoB,EAAE,CAAC,KAAK,EAAE,CAAC;IAC5F,CAAC;IAED,qEAAmB,GAAnB,UAAoB,OAAwB;QAA5C,iBAYC;QAXC,MAAM,CAAC,IAAI,UAAU,CAAC,UAAC,OAAO;YAC5B,IAAM,KAAK,GAAG,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;YAC9C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACf,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,SAAS,CACzD,UAAA,SAAS,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAA3E,CAA2E,CACzF,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,6DAAW,GAAnB,UAAoB,GAAW,EAAE,KAAU;QACzC,MAAM,UAAG,GAAC,GAAG,IAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAG;;IACrC,CAAC;IACI,kDAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,sBAAsB;oBAChC,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,WAAW,EACrD,UAAU,CAAC,cAAM,OAAA,uCAAuC,EAAvC,CAAuC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;iBAC5E,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,sDAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,kBAAkB,GAAG;KAC3B,EAF6F,CAE7F,CAAC;IACF,8CAAC;CArCD,AAqCC,IAAA;SArCY,uCAAuC","file":"gitprovider-repository.validator.js","sourceRoot":"","sourcesContent":["import { Directive, forwardRef } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { GitProviderService } from '../../service/git-provider.service';\n\n\nexport class GitProviderRepositoryValidatorDirective implements Validator {\n  private pattern = /^[a-zA-Z0-9][a-zA-Z0-9-._]{1,63}$/;\n\n  constructor(private gitProvider: GitProviderService) { }\n\n  validate(control: AbstractControl): Observable<{ [key: string]: any }> {\n    return this.validRepositoryName(control).debounceTime(500).distinctUntilChanged().first();\n  }\n\n  validRepositoryName(control: AbstractControl): Observable<{ [key: string]: any }> {\n    return new Observable((resolve) => {\n      const valid = this.pattern.test(control.value);\n      const org = control.parent.get('ghOrg').value;\n      if (!valid) {\n        resolve.next(this.createError('pattern', control.value));\n      } else if (org) {\n        this.gitProvider.isGitHubRepo(org, control.value).subscribe(\n          duplicate => resolve.next(duplicate ? this.createError('duplicate', control.value) : {})\n        );\n      }\n    });\n  }\n\n  private createError(key: string, value: any): any {\n    return { [key]: { value: value } };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[validateRepository]',\n  providers: [{ provide: NG_ASYNC_VALIDATORS, useExisting:\n    forwardRef(() => GitProviderRepositoryValidatorDirective), multi: true }]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GitProviderService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}